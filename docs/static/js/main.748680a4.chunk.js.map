{"version":3,"sources":["home/file-chooser.jsx","home/file-viewer-pagination.jsx","home/file-viewer.jsx","home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["FileChooser","metadata","rows","state","isLoading","handleFileChange","e","files","target","length","file","name","endsWith","setState","decodeAvro","Error","onData","props","avro","createBlobDecoder","on","type","val","push","this","onChange","React","Component","FileViewerPagination","gotoFirstPage","gotoPage","gotoLastPage","pageCount","gotoPreviousPage","page","gotoNextPage","changePageSize","pageSize","parseInt","value","onClick","FileViewer","renderHeader","header","i","key","className","branchName","renderRow","row","fields","map","field","j","onClose","document","title","Math","ceil","Fragment","id","humanSize","size","lastModifiedDate","toString","renderRows","drows","start","end","min","bytes","toFixed","Home","handleData","forceUpdate","handleClose","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.748680a4.chunk.js","sourcesContent":["import avro from \"avsc\";\nimport React from \"react\";\n\nexport default class FileChooser extends React.Component {\n  metadata = {};\n  rows = [];\n  state = { isLoading: false };\n\n  render() {\n    const { isLoading } = this.state;\n    return isLoading ? (\n      <div>loading...</div>\n    ) : (\n      <div>\n        <label>Choose a file</label>\n        <input type=\"file\" onChange={this.handleFileChange}></input>\n      </div>\n    );\n  }\n\n  handleFileChange = e => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      if (file.name.endsWith(\".avro\") || file.name.endsWith(\".AVRO\")) {\n        this.setState({ isLoading: true });\n        this.decodeAvro(file);\n        return;\n      }\n    }\n    throw new Error(\"Please provide a valid AVRO file\");\n  };\n\n  decodeAvro = file => {\n    let metadata = null;\n    let rows = [];\n    const { onData } = this.props;\n    avro\n      .createBlobDecoder(file)\n      .on(\"metadata\", type => {\n        metadata = type;\n      })\n      .on(\"data\", val => {\n        rows.push(val);\n      })\n      .on(\"end\", () => {\n        //console.log(rows.length, file);\n        //console.log(metadata);\n        this.setState({ isLoading: false });\n        onData && onData(file, metadata, rows);\n      });\n  };\n}\n","import React from \"react\";\n\nexport default class FileViewerPagination extends React.Component {\n  render() {\n    const { pageSize = 100, pageCount = 1, page } = this.props;\n    return (\n      <form>\n        <button type=\"button\" onClick={this.gotoFirstPage}>\n          &lt;&lt;\n        </button>\n        <button type=\"button\" onClick={this.gotoPreviousPage}>\n          &lt;\n        </button>\n        <select value={pageSize} onChange={this.changePageSize}>\n          <option>10</option>\n          <option>20</option>\n          <option>50</option>\n          <option>100</option>\n          <option>200</option>\n          <option>500</option>\n          <option>1000</option>\n        </select>\n        <label>\n          Records per page, showing page {page + 1} of {pageCount} pages\n        </label>\n        <button type=\"button\" onClick={this.gotoNextPage}>\n          &gt;\n        </button>\n        <button type=\"button\" onClick={this.gotoLastPage}>\n          &gt;&gt;\n        </button>\n      </form>\n    );\n  }\n\n  gotoFirstPage = () => {\n    const { gotoPage } = this.props;\n    gotoPage && gotoPage(0);\n  };\n\n  gotoLastPage = () => {\n    const { gotoPage, pageCount } = this.props;\n    gotoPage && gotoPage(pageCount - 1);\n  };\n\n  gotoPreviousPage = () => {\n    const { gotoPage, page } = this.props;\n    gotoPage && page > 0 && gotoPage(page - 1);\n  };\n\n  gotoNextPage = () => {\n    const { gotoPage, page, pageCount } = this.props;\n    gotoPage && page < pageCount - 1 && gotoPage(page + 1);\n  };\n\n  changePageSize = e => {\n    const pageSize = parseInt(e.target.value);\n    const { changePageSize } = this.props;\n    changePageSize && changePageSize(pageSize);\n  };\n}\n","import React from \"react\";\nimport FileViewerPagination from \"./file-viewer-pagination\";\nexport default class FileViewer extends React.Component {\n  state = { page: 0, pageSize: 100 };\n  render() {\n    const { file, metadata, onClose, rows } = this.props;\n    const { page, pageSize } = this.state;\n    document.title = file.name;\n    const pageCount = Math.ceil(rows.length / pageSize);\n    return (\n      <React.Fragment>\n        <div id=\"page-header\">\n          <div className=\"float-right\">\n            <button onClick={onClose}>X</button>\n          </div>\n          <h1>\n            {file.name}, {this.humanSize(file.size)},{\" last modified on \"}\n            {file.lastModifiedDate.toString()}\n          </h1>\n        </div>\n        <div id=\"table-scroll\">\n          <table>\n            <thead>\n              <tr>{metadata.fields.map(this.renderHeader)}</tr>\n            </thead>\n            <tbody>{this.renderRows()}</tbody>\n          </table>\n        </div>\n        <div id=\"page-footer\">\n          <FileViewerPagination\n            page={page}\n            pageCount={pageCount}\n            pageSize={pageSize}\n            gotoPage={this.gotoPage}\n            changePageSize={this.changePageSize}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderHeader = (header, i) => {\n    return (\n      <th key={i} className={header.type.branchName}>\n        {header.name} ({header.type.branchName})\n      </th>\n    );\n  };\n\n  renderRows() {\n    const { rows } = this.props;\n    const drows = [];\n    const { page, pageSize } = this.state;\n    const start = page * pageSize;\n    const end = Math.min(start + pageSize, rows.length);\n    for (let i = start; i < end; i++) drows.push(rows[i]);\n    return drows.map(this.renderRow);\n  }\n\n  renderRow = (row, i) => {\n    const { metadata } = this.props;\n    return (\n      <tr key={i}>\n        {metadata.fields.map((field, j) => {\n          return (\n            <td key={j} className={field.type.branchName}>\n              {row[field.name]}\n            </td>\n          );\n        })}\n      </tr>\n    );\n  };\n\n  humanSize(bytes) {\n    if (bytes >= 1073741824) {\n      bytes = (bytes / 1073741824).toFixed(2) + \" GB\";\n    } else if (bytes >= 1048576) {\n      bytes = (bytes / 1048576).toFixed(2) + \" MB\";\n    } else if (bytes >= 1024) {\n      bytes = (bytes / 1024).toFixed(2) + \" KB\";\n    } else if (bytes > 1) {\n      bytes = bytes + \" bytes\";\n    } else if (bytes === 1) {\n      bytes = bytes + \" byte\";\n    } else {\n      bytes = \"0 bytes\";\n    }\n    return bytes;\n  }\n\n  gotoPage = page => {\n    this.setState({ page: page });\n  };\n\n  changePageSize = pageSize => {\n    this.setState({ pageSize: pageSize, page: 0 });\n  };\n}\n","import React from \"react\";\nimport FileChooser from \"./file-chooser\";\nimport FileViewer from \"./file-viewer\";\n\nexport default class Home extends React.Component {\n  render() {\n    const file = this.file;\n    const metadata = this.metadata;\n    const rows = this.rows;\n    return file && metadata ? (\n      <FileViewer\n        file={file}\n        metadata={metadata}\n        rows={rows}\n        onClose={this.handleClose}\n      />\n    ) : (\n      <FileChooser onData={this.handleData} />\n    );\n  }\n\n  handleData = (file, metadata, rows) => {\n    this.file = file;\n    this.metadata = metadata;\n    this.rows = rows;\n    this.forceUpdate();\n  };\n\n  handleClose = () => {\n    this.file = null;\n    this.metadata = null;\n    this.rows = null;\n    this.forceUpdate();\n  };\n}\n","import React from \"react\";\nimport Home from \"./home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}